def scan_type
def target
def authToken

pipeline {
    agent any
    
    environment {
        AUTH_USERNAME = 'Tester01'
        AUTH_PASSWORD = 'welcome123'
        CONTAINER_NAME = 'owasp'
    }
    
    parameters {
        choice(choices: ["Baseline", "APIS", "Full"],
                description: 'Type of scan that is going to perform inside the container',
                name: 'SCAN_TYPE')

        string(defaultValue: "https://qa2.criticalmention.com/allmedia/search",
                description: 'Target URL to scan',
                name: 'TARGET')
    }
    stages {
        stage('Pipeline Info') {
            steps {
                script {
                    echo "<--Parameter Initialization-->"
                    echo """
                    The current parameters are:
                        Scan Type: ${params.SCAN_TYPE}
                        Target: ${params.TARGET}
                    """
                }
            }
        }
        
        stage('Get Auth Header from cookie') {
            steps {
                script {
                    def loginUrl = "https://qa2.criticalmention.com/allmedia/session"
                    def authCookieName = "Authorization"
                    
                    def curlCommand = """
                    curl -X POST -d "username=$AUTH_USERNAME&password=$AUTH_PASSWORD" $loginUrl
                    """
                    echo "Executing curl command: ${curlCommand}"
                    def curlResponse = sh(script: curlCommand, returnStdout: true).trim()
                    echo "curl response: ${curlResponse}"
                    
                    // Parse the response JSON to extract the session cookie
                    def jsonResponse = readJSON text: curlResponse
                    def authCookieValue = jsonResponse.id.toString().trim()
                    
                    if (authCookieValue) {
                        authToken = "Bearer $authCookieValue"
                        echo "Authorization header: $authToken"
                    } else {
                        error("Session cookie '$authCookieName' not found in the API response.")
                    }
                }
            }
        }
 
        stage('Setting up OWASP ZAP docker container') {
            steps {
                script {
                    echo "Pulling up last stable OWASP ZAP container --> Start"
                    sh 'docker pull owasp/zap2docker-stable:latest'
                    echo "Pulling up last VMS container --> End"

                    echo "Starting ZAP container and expose the API port --> Start"
                    // sh """docker run --rm -d --name owasp -p 8171:8171 -v $PWD:$PWD -w $PWD owasp/zap2docker-stable"""
                    
                    sh """docker run -d --name owasp -p 8171:8171 -v /var/lib/jenkins:/var/lib/jenkins -w /var/lib/jenkins owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0 -port 8171 -config api.key=12345 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true """
                    
                    // Wait for a brief moment to allow the container to fully start
                    sleep(time: 60, unit: 'SECONDS')
                    
                    echo "Printing container logs:"
                    sh '''
                    docker logs owasp
                    '''
                    
                    sh '''
                    docker images
                    '''
                    
                    sh '''
                    docker ps
                    '''
                }
            }
        }
        
        stage('Prepare wrk directory') {
             steps {
                 script {
                     sh '''
                     docker exec owasp mkdir /zap/wrk
                     '''
                 }
             }
        }

        stage('Scanning target on owasp container') {
            steps {
                script {
                    // Load your ZAP Context using the ZAP API
                    sh "curl -X POST http://localhost:8171/JSON/context/action/includeContextInContext?contextName=myContext&contextName=Default+Context"

                    scan_type = "${params.SCAN_TYPE}"
                    echo "----> scan_type: $scan_type"
                    if (scan_type == "Baseline") {
                        sh """
                        docker exec owasp zap-baseline.py \
                        -t ${params.TARGET} \
                        -x report.xml \
                        -r report.html \
                        -J "-config replacer.full_list(0).description=AuthorizationHeader -config replacer.full_list(0).enabled=true -config replacer.full_list(0).matchtype=REQ_HEADER -config replacer.full_list(0).matchstr=Authorization -config replacer.full_list(0).regex=false -config replacer.full_list(0).replacement=$authToken"
                        """
                    } else if (scan_type == "APIS") {
                        sh """
                        docker exec owasp zap-api-scan.py \
                        -t ${params.TARGET} \
                        -x report.xml \
                        -r report.html \
                        -J "-config replacer.full_list(0).description=AuthorizationHeader -config replacer.full_list(0).enabled=true -config replacer.full_list(0).matchtype=REQ_HEADER -config replacer.full_list(0).matchstr=Authorization -config replacer.full_list(0).regex=false -config replacer.full_list(0).replacement=$authToken"
                        """
                    } else if (scan_type == "Full") {
                        sh """
                        docker exec owasp zap-full-scan.py \
                        -t ${params.TARGET} \
                        -x report.xml \
                        -r report.html \
                        -J "-config replacer.full_list(0).description=AuthorizationHeader -config replacer.full_list(0).enabled=true -config replacer.full_list(0).matchtype=REQ_HEADER -config replacer.full_list(0).matchstr=Authorization -config replacer.full_list(0).regex=false -config replacer.full_list(0).replacement=$authToken"
                        """
                    } else {
                        echo "Something went wrong..."
                    }
                    
                    // Capture ZAP logs
                    sh """
                    docker logs owasp > zap_logs.txt
                    """
                }
            }
        }

        stage('Copy Report to Workspace') {
            steps {
                script {
                    sh """
                    docker cp owasp:/zap/wrk/report.xml ${WORKSPACE}/report.xml
                    """
                     
                    sh """
                    docker cp owasp:/zap/wrk/report.html ${WORKSPACE}/report.html
                    """
                }
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: 'report.*'
        }
        always {
            echo "Removing container"
            sh '''
            docker stop owasp
            docker rm owasp
            '''
        }
    }
}
