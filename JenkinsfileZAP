def scan_type
def target
def authToken
def contextName = "CTVAuth.context" // Name of the ZAP context
def scriptName = "CTVAuth.js"  // Name of script file

pipeline {
    agent any

    environment {
        AUTH_USERNAME = 'test'
        AUTH_PASSWORD = 'test'
        FILE_PATH = 'contexts'
        CONTAINER_NAME = 'owaspPrasad'
    }

    parameters {
        choice(choices: ["Baseline", "APIS", "Full"],
                description: 'Type of scan to perform inside the container',
                name: 'SCAN_TYPE')

        string(defaultValue: "https://qa2.criticalmention.com",
                description: 'Target URL to scan',
                name: 'TARGET')
    }

    stages {
        stage('Pipeline Info') {
            steps {
                script {
                    echo "<-- Parameter Initialization -->"
                    echo """
                    The current parameters are:
                        Scan Type: ${params.SCAN_TYPE}
                        Target: ${params.TARGET}
                    """
                }
            }
        }

        stage('Setting up ${CONTAINER_NAME} ZAP Docker container') {
            steps {
                script {
                    echo "Pulling up the latest stable owasp ZAP container --> Start"
                    sh 'docker pull owasp/zap2docker-stable:latest'
                    echo "Pulling up the latest stable owasp ZAP container --> End"

                    echo "Starting ZAP container and exposing the API port --> Start"
                    sh """docker run -d --name ${CONTAINER_NAME} -p 8171:8171 -v /var/lib/jenkins:/var/lib/jenkins -w /var/lib/jenkins owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0 -port 8171 -config api.key=12345 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true """
                    
                    // Wait for a brief moment to allow the container to fully start
                    sleep(time: 30, unit: 'SECONDS')

                    sh '''
                    docker images
                    '''

                    sh '''
                    docker ps
                    '''
                }
            }
        }

        stage('Prepare wrk directory') {
            steps {
                script {
                    sh '''
                    docker exec ${CONTAINER_NAME} mkdir /zap/wrk
                    '''
                }
            }
        }

        stage('Upload ZAP Context and Auth Script') {
            steps {
                script {
                    // Upload the ZAP context file and authentication script
                    sh '''
                    docker cp $FILE_PATH/$contextName ${CONTAINER_NAME}:/zap/wrk/$contextName
                    docker cp $FILE_PATH/$scriptName ${CONTAINER_NAME}:/zap/wrk/$scriptName
                    '''
                    echo "The context and script file is copied"
        			sh '''docker exec ${CONTAINER_NAME} ls /zap/wrk/contexts'''
        			sh '''docker exec ${CONTAINER_NAME} ls /zap/wrk'''
                    sh '''docker exec ${CONTAINER_NAME} pwd'''
                }
            }
        }

        stage('Scanning target on ZAP container') {
            steps {
                script {
                    ERROR
                    // Check whether ZAP is running on the configured port
                    sh """ docker exec ${CONTAINER_NAME} curl http://localhost:8171 """

                    // Load your ZAP Context using the ZAP API
                     sh """
                     docker exec ${CONTAINER_NAME} curl -X POST 'http://localhost:8171/JSON/context/action/loadContext' \
                     -d 'contextFile=/zap/wrk/$contextName' \
                     -d 'contextName=TestContext' \
                     -d 'apikey=12345'
                     """

                    //sh "docker exec -d owasp zap.sh -verbosity INFO -p 8171 --api-key 12345 -dir /zap/wrk context import /zap/wrk/$contextName"

                    scan_type = "${params.SCAN_TYPE}"
                    echo "----> scan_type: $scan_type"

                    if (scan_type == "Baseline") {
                        sh """
                        docker exec ${CONTAINER_NAME} zap-baseline.py \
                        -t ${params.TARGET} \
                        -x report.xml \
                        -r report.html \
                        //-J "-scriptname $scriptName"
                        -J -l INFO \
                        -c /zap/wrk/$contextName \
                        -i /zap/wrk/$scriptName
                        """
                    } else if (scan_type == "APIS") {
                        sh """
                        docker exec ${CONTAINER_NAME} zap-api-scan.py \
                        -t ${params.TARGET} \
                        -x report.xml \
                        -r report.html \
                        //-J "-scriptname $scriptName"
                        -J -l INFO \
                        -c /zap/wrk/$contextName \
                        -i /zap/wrk/$scriptName
                        """
                    } else if (scan_type == "Full") {
                        sh """
                        docker exec ${CONTAINER_NAME} zap-full-scan.py \
                        -t ${params.TARGET} \
                        -x report.xml \
                        -r report.html \
                        //-J "-scriptname $scriptName"
                        -J -l INFO \
                        -c /zap/wrk/$contextName \
                        -i /zap/wrk/$scriptName
                        """
                    } else {
                        echo "Something went wrong..."
                    }

                    // Capture ZAP logs
                    sh """
                    docker logs ${CONTAINER_NAME} > /zap/wrk/zap_logs.txt
                    """
                }
            }
        }

        stage('Copy Report to Workspace') {
            steps {
                script {
                    sh """
                    docker cp ${CONTAINER_NAME}:/zap/wrk/report.xml ${WORKSPACE}/report.xml
                    """

                    sh """
                    docker cp ${CONTAINER_NAME}:/zap/wrk/report.html ${WORKSPACE}/report.html
                    """
                }
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: 'report.*'
        }
        always {

            echo "Printing container logs:"
            sh '''
            docker logs ${CONTAINER_NAME}
            '''

            echo "Removing container"
            sh '''
            docker stop ${CONTAINER_NAME}
            docker rm ${CONTAINER_NAME}
            '''
        }
    }
}
